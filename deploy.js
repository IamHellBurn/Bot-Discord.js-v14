import { REST, Routes } from 'discord.js';
import { config } from 'dotenv';
import { readdir } from 'fs/promises';
import { pathToFileURL } from 'url';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

// Configurar vari√°veis de ambiente
config();

// Obter diret√≥rio atual para ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const commands = [];

// Fun√ß√£o para carregar todos os slash commands
async function loadSlashCommands() {
    try {
        const slashFolders = await readdir(join(__dirname, 'slashCommands'));
        
        for (const folder of slashFolders) {
            const slashFiles = await readdir(join(__dirname, 'slashCommands', folder));
            
            for (const file of slashFiles) {
                if (!file.endsWith('.js')) continue;
                
                const filePath = pathToFileURL(join(__dirname, 'slashCommands', folder, file));
                const slashCommand = await import(filePath);
                
                if (slashCommand.default?.data) {
                    commands.push(slashCommand.default.data.toJSON());
                    console.log(`‚úÖ Slash command carregado: ${slashCommand.default.data.name} (${folder})`);
                } else {
                    console.log(`‚ö†Ô∏è Slash command inv√°lido: ${file}`);
                }
            }
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar slash commands:', error);
        process.exit(1);
    }
}

// Fun√ß√£o principal de deploy
async function deployCommands() {
    console.log('üöÄ Iniciando deploy dos slash commands...');
    
    // Verificar vari√°veis de ambiente
    if (!process.env.DISCORD_TOKEN) {
        console.error('‚ùå DISCORD_TOKEN n√£o definido no arquivo .env');
        process.exit(1);
    }
    
    if (!process.env.CLIENT_ID) {
        console.error('‚ùå CLIENT_ID n√£o definido no arquivo .env');
        process.exit(1);
    }
    
    // Carregar comandos
    await loadSlashCommands();
    
    if (commands.length === 0) {
        console.error('‚ùå Nenhum slash command encontrado para registrar');
        process.exit(1);
    }
    
    // Configurar REST client
    const rest = new REST({ version: '10' }).setToken(process.env.DISCORD_TOKEN);
    
    try {
        console.log(`üîÑ Registrando ${commands.length} slash commands...`);
        
        let data;
        
        if (process.env.GUILD_ID) {
            // Registrar apenas no servidor de teste (mais r√°pido)
            console.log(`üìç Registrando comandos no servidor: ${process.env.GUILD_ID}`);
            data = await rest.put(
                Routes.applicationGuildCommands(process.env.CLIENT_ID, process.env.GUILD_ID),
                { body: commands }
            );
        } else {
            // Registrar globalmente (pode levar at√© 1 hora para aparecer)
            console.log('üåç Registrando comandos globalmente...');
            data = await rest.put(
                Routes.applicationCommands(process.env.CLIENT_ID),
                { body: commands }
            );
        }
        
        console.log('‚úÖ Slash commands registrados com sucesso!');
        console.log(`üìä Total: ${data.length} comandos`);
        
        // Listar comandos registrados
        console.log('\nüìã Comandos registrados:');
        data.forEach((command, index) => {
            console.log(`   ${index + 1}. /${command.name} - ${command.description}`);
        });
        
        console.log('\nüéâ Deploy conclu√≠do com sucesso!');
        
        if (process.env.GUILD_ID) {
            console.log('üí° Dica: Os comandos j√° est√£o dispon√≠veis no servidor de teste.');
        } else {
            console.log('üí° Dica: Comandos globais podem levar at√© 1 hora para aparecer em todos os servidores.');
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao registrar slash commands:', error);
        
        if (error.code === 50001) {
            console.error('üí° Erro: Bot n√£o tem permiss√µes suficientes. Verifique se o bot tem a permiss√£o "applications.commands"');
        } else if (error.code === 10013) {
            console.error('üí° Erro: CLIENT_ID ou GUILD_ID inv√°lido');
        } else if (error.code === 40001) {
            console.error('üí° Erro: Token inv√°lido ou expirado');
        }
        
        process.exit(1);
    }
}

// Fun√ß√£o para limpar comandos (√∫til para desenvolvimento)
async function clearCommands() {
    console.log('üóëÔ∏è Limpando slash commands...');
    
    const rest = new REST({ version: '10' }).setToken(process.env.DISCORD_TOKEN);
    
    try {
        if (process.env.GUILD_ID) {
            await rest.put(
                Routes.applicationGuildCommands(process.env.CLIENT_ID, process.env.GUILD_ID),
                { body: [] }
            );
            console.log('‚úÖ Comandos do servidor limpos com sucesso!');
        } else {
            await rest.put(
                Routes.applicationCommands(process.env.CLIENT_ID),
                { body: [] }
            );
            console.log('‚úÖ Comandos globais limpos com sucesso!');
        }
    } catch (error) {
        console.error('‚ùå Erro ao limpar comandos:', error);
    }
}

// Verificar argumentos da linha de comando
const args = process.argv.slice(2);

if (args.includes('--clear') || args.includes('-c')) {
    clearCommands();
} else if (args.includes('--help') || args.includes('-h')) {
    console.log('üìö Uso do deploy.js:');
    console.log('');
    console.log('  node deploy.js          - Registrar slash commands');
    console.log('  node deploy.js --clear  - Limpar todos os slash commands');
    console.log('  node deploy.js --help   - Mostrar esta ajuda');
    console.log('');
    console.log('üîß Configura√ß√£o necess√°ria no .env:');
    console.log('  DISCORD_TOKEN - Token do bot');
    console.log('  CLIENT_ID     - ID do bot/aplica√ß√£o');
    console.log('  GUILD_ID      - ID do servidor (opcional, para teste)');
} else {
    deployCommands();
}

// Handler para erros n√£o capturados
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
    process.exit(1);
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
    process.exit(1);
});